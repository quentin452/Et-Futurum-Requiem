buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal() // this line has to be after mavenCentral() or ForgeGradle breaks apart
		maven {
			name = "forge"
			url = "https://maven.minecraftforge.net/"
		}
		maven {
			url = "https://jitpack.io"
		}
	}
	dependencies {
		classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.11'
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
	}
}

repositories {
	maven {
		url 'https://jitpack.io'
	}
	maven {
		name = "gt"
		url = "https://gregtech.mechaenetia.com/"
	}
}


apply plugin: 'forge'

apply plugin: "com.github.johnrengelman.shadow"
// Bump this every new code update after a version release, even if not releasing yet, that
// way SNAPSHOT's work properly as something like `2.1.2-SNAPSHOT` orders before `2.1.2 in
// SEMVER that gradle uses.
group = "ganymedes01.etfuturum"
archivesBaseName = "Et_Futurum_Requiem"
def modVersion = "2.6.0fork8"
version = project.hasProperty("useCommitHashInVersion") ? getCommitVersion(modVersion) : modVersion

def buildAll = project.hasProperty("all")

def getCommitVersion(modVersion){
	try {
		def commitHashProc = "git rev-parse --short HEAD".execute()
		commitHashProc.waitFor()
		if(commitHashProc.exitValue() == 0){
			def commitHash = commitHashProc.text.trim()
			
			def commitTagProc = "git tag --points-at HEAD".execute()
			commitTagProc.waitFor()
			if(commitTagProc.exitValue() == 0){
				def commitTag = commitTagProc.text.trim()
				if(commitTag){
					return modVersion // if the commit is tagged, assume it's a release
				} else {
					return modVersion + "-SNAPSHOT-" + commitHash
				}
			} else {
				println commitTagProc.err.text
				throw new Exception("git tag exited with non-zero return value")
			}
		} else {
			println commitHashProc.err.text
			throw new Exception("git rev-parse exited with non-zero return value")
		}
	} catch(Exception e){
		println "Failed to get commit version: " + e.getMessage()
	}
	return modVersion // fallback
}

// Run `./gradlew clean` when the metadata changes, otherwise the in-game meta (ForgeGradle's substitution) will remain stale.

def authorList = ["\u00A79ganymedes01", "\u00A7bRoadhog360", "\u00A7aembeddedt", "\u00A7ajss2a98aj", "\u00A7amakamys", "\u00A7aKryptonCaptain"]
def meta = [
	name: "Et Futurum Requiem", // hardcoded in Reference.java
	version: modVersion,
	commitVersion: version,
	mcversion: "1.7.10",
	credits: "\u00A7bDelirusCrux, AstroTibs",
	authorList: authorList.join('", "'),
	url: "\u00A77https://www.curseforge.com/minecraft/mc-mods/et-futurum-requiem",
	description: "\u00A79Brings the future to now, for real this time.",
	logoFile: "assets/etfuturum/logo.png"
]

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.bootClasspath = org.gradle.internal.jvm.Jvm.current().getJre().getHomeDir().toString() +"/lib/rt.jar"
compileJava {
	options.encoding = "UTF-8"
}

configurations {
    // By default only compileClasspath extends shadow, make runtime extend it too
    compile.extendsFrom(shadow)
}

dependencies {
	// Can use `compileOnly` instead of `compile` if you want to require it at build time,
	// but not require it in `runClient`/`runServer`
	compileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
	compileOnly "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10:dev"
	/** every file in libs/ gets forcibly compiled, please use another dir
	compile files('libs/BaublesExpanded-2.1.2-dev.jar')
	compile files('libs/CraftTweaker-1.7.10-3.1.0-legacy.jar')*/
	compileOnly "team.chisel:Chisel:2.9.5.12:deobf"
	compileOnly "team.chisel.ctmlib:CTMLib:MC1.7.10-1.4.1.5:deobf"
	compileOnly "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
	compileOnly "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compileOnly "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	
	// 1.1.12 (for some reason the build failed when I used the version tag)
	compileOnly("com.github.GTNewHorizons:lwjgl3ify:92b1e089c5:api") {
		transitive = false
	}
	
	shadow('com.github.makamys:MCLib:0.3.7.5') {
		exclude group: "codechicken"
	}
}

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "eclipse/assets"
	replaceIn 'ganymedes01/etfuturum/lib/Reference.java'
	meta.each { k, v -> replace "@${k.toUpperCase()}@", v }
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.properties meta
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand meta.collectEntries { k, v -> [k, v.replaceAll("\u00A7.", "")] } // strip formatting
	 }

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

jar {
	// we disable the original jar task, and make shadowJar do the work instead
	enabled = false
	dependsOn shadowJar
}

// shadowJar is the new jar
shadowJar {
	classifier = '' // use the same file name as the jar task
	configurations = [project.configurations.shadow]
	relocate 'makamys.mclib', 'ganymedes01.etfuturum.repackage.makamys.mclib'
	exclude '**/LICENSE.txt'
	
	manifest {
		attributes(
			'FMLAT': "etfuturum_at.cfg",
		)
	}
}

task shadowJarNoMixin(type: Jar) {
	dependsOn shadowJar
	
	classifier = ''
	version += '+nomixin'
	from(zipTree(tasks.shadowJar.archivePath)){
		exclude "org/spongepowered/**"
		exclude "META-INF/services/**"
		exclude "mcmod.info" // we create a different mcmod.info in this task
	}
	from(sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		def metaNoMixin = meta.clone()
		// add +nomixin to the end of the version in mcmod.info
		metaNoMixin['commitVersion'] = meta['commitVersion'] + '+nomixin'
		expand metaNoMixin.collectEntries { k, v -> [k, v.replaceAll("\u00A7.", "")] } // strip formatting
	}
	manifest = tasks.shadowJar.manifest
}

task devJar(type: Jar) {
	dependsOn shadowJar
	
	classifier = 'dev'
	// copy the contents of the main jar
	from zipTree(tasks.shadowJar.archivePath)
	
	manifest = tasks.shadowJar.manifest
}

task devJarNoMixin(type: Jar) {
	dependsOn devJar
	
	classifier = 'dev'
	version += '+nomixin'
	from zipTree(tasks.devJar.archivePath)
	
	exclude "org/spongepowered/**"
	exclude "META-INF/services/**"
	
	manifest = tasks.shadowJar.manifest
}

if(buildAll) {
	// we create dev jars by copying the output jars before they get obfuscated
	reobf.dependsOn devJar

	artifacts {
		archives devJar, devJarNoMixin, shadowJarNoMixin
	}
}


if (!hasProperty("mavenUsername")) {
	ext.mavenUsername="${System.getenv().MAVEN_USERNAME}"
}

if (!hasProperty("mavenPassword")) {
	ext.mavenPassword="${System.getenv().MAVEN_PASSWORD}"
}

if (!hasProperty("mavenURL")) {
	ext.mavenURL="${System.getenv().MAVEN_URL}"
}


uploadArchives {
	repositories {
		mavenDeployer {
			uniqueVersion = false
			repository(url: mavenURL) {
				authentication(userName: mavenUsername, password: mavenPassword)
			}
		}
	}
}

//##########################################################################################################
//########################################    Mixin  Part   ################################################
//##########################################################################################################
//Add
//--tweakClass org.spongepowered.asm.launch.MixinTweaker --mixin mixins.etfuturum.json
//to your client and server program arguments if working in a dev environment.
def yourMixinConfig = 'mixins.etfuturum.json'
def refMapForYourConfig = 'mixins.etfuturum.refmap.json'
def relativePathToMixinAP = 'tools/mixin-0.8-SNAPSHOT.jar'

repositories {
	maven {
		name = "sponge"
		url = "https://repo.spongepowered.org/maven/"
	}
}

dependencies {
	shadow('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
		// Mixin includes a lot of dependencies that are too up-to-date
		exclude module: 'launchwrapper'
		exclude module: 'guava'
		exclude module: 'gson'
		exclude module: 'commons-io'
		exclude module: 'log4j-core'
	}
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + refMapForYourConfig

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

shadowJar {
	from refMap
	manifest {
		attributes.put("TweakClass", "org.spongepowered.asm.launch.MixinTweaker")
		attributes.put("FMLCorePluginContainsFMLMod", true)
		attributes.put("ForceLoadAsMod", true)
		attributes.put("MixinConfigs", yourMixinConfig)
	}
}

reobf {
	addExtraSrgFile mixinSrg
}

afterEvaluate {
	def fixedRelPathToAP = relativePathToMixinAP
	if(fixedRelPathToAP.startsWith('./') || fixedRelPathToAP.startsWith('.\\')){
		fixedRelPathToAP = fixedRelPathToAP.substring(2)
	} else if(fixedRelPathToAP.startsWith('/') || fixedRelPathToAP.startsWith('\\')){
		fixedRelPathToAP = fixedRelPathToAP.substring(1)
	}

	tasks.compileJava {
		println "Path: " + projectDir.absolutePath
		options.compilerArgs += [
				// There's a bug in the AnnotationProcessor for 0.7.11 that will generate the annotations pointing to the parent class instead of subclass
				// resulting in the mixin not being applied.  This is fixed in 0.8, however 0.8 needs guava > 21.0, and minecraft ships with 17.0.
				// So as a hacky workaround... ship with 0.7.11, but use the AP from 0.8 for compiling
				"-processorpath", projectDir.absolutePath + '/' + fixedRelPathToAP,
				"-processor", "org.spongepowered.tools.obfuscation.MixinObfuscationProcessorInjection,org.spongepowered.tools.obfuscation.MixinObfuscationProcessorTargets",
				"-Xlint:-sunapi", "-XDenableSunApiLintControl", "-XDignore.symbol.file",
				"-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"
		]
	}
}

sourceSets {
	main {
		ext.refMap = refMapForYourConfig
	}
}

runClient {
    // Workaround for Mixin not detecting mod (https://github.com/SpongePowered/Mixin/issues/207)
    // (Fixed in UniMix, so this should be removed if we ever switch to it.)
    args("--mods=" + java.nio.file.Paths.get("$projectDir").resolve(minecraft.runDir).normalize().relativize(shadowJar.archivePath.toPath()))
}
